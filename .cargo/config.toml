# This config uses (unstable) features to improve compile times.
#
# "-fuse-ld=mold"
# One of the slowest aspects of compiling large Rust programs is the linking time.
# This file configures mold as a faster drop-in replacement for existing Unix linkers.
# It is several times quicker than the LLVM lld linker, the second-fastest open-source linker.
#
# "-Zshare-generics=y"
# Unstable. Make the current crate share its generic instantiations
# Note that you may have some issues with this flag on Windows. If compiling fails due to the 65k symbol limit,
# you may have to disable this setting. For more information and possible solutions to this error, see
# <https://github.com/bevyengine/bevy/issues/1110>.
#
# "-Zthreads=0"
# Unstable. Enables rustc's parallel frontend, which improves performance when parsing, type checking, borrow
# checking, and more. We currently set `threads=0`, which defaults to the amount of cores in your CPU.
###########################
# Features improving runtime performance.
#
# "-Clinker-plugin-lto"
# "-flto"
# Allows for deferring the LTO optimization to the actual linking step, which in turn allows for performing
# interprocedural optimizations across programming language boundaries if all the object files being linked
# were created by LLVM based toolchains. The prime example here would be linking Rust code together with
# Clang-compiled C/C++ code. Note that the Rust code has to be compiled with -C linker-plugin-lto and the
# C/C++ code with -flto or -flto=thin so that object files are emitted as LLVM bitcode.
#
# "+atomics"
# Enables thread synchronization primitives in the WebAssembly instruction set.
# This is one of the required steps to allow multi-threading in WebAssembly.
###########################
# Other features used.
#
# "+crt-static"
# Enables a statically linked runtime. Useful for running in e.g. "stratch" Docker containers.


# [build]
#     rustflags=["-Zshare-generics=y", "-Zthreads=0"]

# Workaround for rustflags not being cumulative
# https://github.com/rust-lang/cargo/issues/5376#issuecomment-2163350032
[target.'cfg(all())']
    rustflags=["-Zshare-generics=y", "-Zthreads=0"]

[target.'cfg(target_os = "linux")']
    linker="clang"
    rustflags=["-Clink-arg=-fuse-ld=mold"]

# Docker
[target.x86_64-unknown-linux-musl]
    rustflags=[
        "-Ctarget-feature=+crt-static",
        "-Clinker-plugin-lto",
        "-Clink-arg=-flto",
        "-Clink-arg=mimalloc.o",
    ]

# Frontend of program
[target.wasm32-unknown-unknown]
    rustflags=[
        "-Clink-arg=--max-memory=4294967296",
        "-Ctarget-feature=+atomics",
    ]

[unstable]
    # We need to build the standard library from source to support the "wasm32-unknown-unknown" target.
    build-std=["alloc", "core", "panic_abort", "std"]
    build-std-features=["panic_immediate_abort"]
