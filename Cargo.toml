[package]
    authors=["TheRealMorgenfrue"]
    description="The Rust implementation of WebVOWL with a strong focus on performance and scalability."
    edition="2024"
    keywords=[
        "force-directed-graph",
        "graph",
        "ontology",
        "vowl",
        "web",
    ]
    license-file="LICENSE"
    name="webvowl-reimagined"
    readme="README.md"
    repository="https://github.com/WebVOWL/WebVOWL-Rust"
    version="0.0.1"

[lib]
    crate-type=["cdylib", "rlib"]
    path="src/test/src/lib.rs"


[dependencies]
    actix-files={version="0.6", optional=true}
    actix-web={version="4", optional=true, features=[
        "macros",
    ]}
    console_error_panic_hook="0.1"
    getrandom={version="0.2", features=["js"]}
    glam="0.29.0"
    grapher={version=">=0.2.3", git="https://github.com/WebVOWL/RustGrapher.git"}
    horned-owl={version="1.0.0", default-features=false}
    http={version="1.3.1", optional=true}
    leptos={version="0.8.2", features=["nightly"]}
    leptos_actix={version="0.8.2", optional=true}
    leptos_meta={version="0.8.2"}
    leptos_router={version="0.8.2", features=["nightly"]}
    petgraph="0.6.5"
    rayon="1.10"
    serde={version="1.0", features=["derive"]}
    serde_json="1.0"
    # futures = "0.3"
    wasm-bindgen="0.2"
    wasm-bindgen-futures="0.4"
    wasm-bindgen-rayon={version="1.3"} #, optional = true }

    [dependencies.tokio]
        version="1.43"
        # https://docs.rs/tokio/latest/tokio/index.html#feature-flags
        features=["rt", "time"]

    [dependencies.web-sys]
        version="0.3"
        # https://docs.rs/web-sys/latest/web_sys/#modules
        features=[
            "Blob",
            "Document",
            "Element",
            "File",
            "HtmlElement",
            "Node",
            "Window",
            "console",
        ]

        # console_log = "1.0"
        # egui_wgpu_backend = { version = "0.25", features = ["web"] }
        # egui_winit_platform = { version = "0.19", features = ["webbrowser"] }
        # # winit = { version = "0.28.7" }
        # wasm-cookies = "0.2"
        # wgpu = { version = "0.17", features = ["webgl"] }
        # [features]
        # parallel = ["wasm-bindgen-rayon"]


[features]
    csr=["leptos/csr"]
    hydrate=["leptos/hydrate"]
    ssr=[
        "dep:actix-files",
        "dep:actix-web",
        "dep:leptos_actix",
        "leptos/ssr",
        "leptos_meta/ssr",
        "leptos_router/ssr",
    ]


# Default profile for devs, fast to compile, okay enough to run
[profile.dev]
    debug=true
    debug-assertions=true
    incremental=true
    lto=false
    opt-level=1
    overflow-checks=true
    panic="abort"

# This profile is used for production releases - compile time doesn't matter.
[profile.release]
    debug=false
    debug-assertions=false
    lto=true
    opt-level=3
    panic="abort"

    [package.metadata.wasm-pack.profile.release]
        # Execute very expensive optimization passes to further optimize the wasm binary
        wasm-opt=['-O4']

# This profile is used by developers for release profiling
[profile.releasedebuginfo]
    debug=true
    inherits='release'


# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
    codegen-units=1
    inherits="release"
    lto=true
    opt-level='z'
    panic="abort"

    [package.metadata.leptos]
        # The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
        # output-name="{{project-name}}"
        # The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
        site-root="target/site"
        # The site-root relative folder where all compiled output (JS, WASM and CSS) is written
        # Defaults to pkg
        site-pkg-dir="pkg"
        # [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
        style-file="style/main.scss"
        # Assets source dir. All files found here will be copied and synchronized to site-root.
        # The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
        #
        # Optional. Env: LEPTOS_ASSETS_DIR.
        assets-dir="assets"
        # The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
        site-addr="127.0.0.1:3000"
        # The port to use for automatic reload monitoring
        reload-port=3001
        # [Optional] Command to use when running end2end tests. It will run in the end2end dir.
        #   [Windows] for non-WSL use "npx.cmd playwright test"
        #   This binary name can be checked in Powershell with Get-Command npx
        end2end-cmd="npx playwright test"
        end2end-dir="end2end"
        #  The browserlist query used for optimizing the CSS.
        browserquery="defaults"
        # The environment Leptos will run in, usually either "DEV" or "PROD"
        env="DEV"
        # The features to use when compiling the bin target
        #
        # Optional. Can be over-ridden with the command line parameter --bin-features
        bin-features=["ssr"]

        # If the --no-default-features flag should be used when compiling the bin target
        #
        # Optional. Defaults to false.
        bin-default-features=false

        # The features to use when compiling the lib target
        #
        # Optional. Can be over-ridden with the command line parameter --lib-features
        lib-features=["hydrate"]

        # If the --no-default-features flag should be used when compiling the lib target
        #
        # Optional. Defaults to false.
        lib-default-features=false

        # The profile to use for the lib target when compiling for release
        #
        # Optional. Defaults to "release".
        lib-profile-release="wasm-release"
